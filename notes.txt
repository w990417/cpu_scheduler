CURRENT TASK:

just finished rewriting CPU()
scheduler() is removed
prio_q is not used anymore (use ready_q instead)

NEXT TASK:
preemptive SJF.




TODO: 
<0524>-----------------------------------------------------------------------------
struct Eval
evaluate(): modify to return an eval struct type which contain
    time related attributes for all processes + avg + sums,
    which can be searched up with user input.

<0525>
global var `log` and `log_idx`
 - log: array of strings
 - log_idx: index of log array

e.g:
void addToLog(const char* message) {
  strncpy(log[nextLogEntry], message, sizeof(log[nextLogEntry]) - 1);
  log[nextLogEntry][sizeof(log[nextLogEntry]) - 1] = '\0';  // Ensure null-termination
  nextLogEntry++;
}
>> addToLog("[PID: 9441] is scheduled at clk=5");

print_log() function
<0524>-----------------------------------------------------------------------------


<0526>-----------------------------------------------------------------------------
modify enqueue() to take in states as well
    - enqueue(Queue*, Process*, int from_state, int to_state)
how to use enqueue for new_pool which is not a queue? ... just keep using arrived_to_ready()..?
<0526>-----------------------------------------------------------------------------


MISCELLANEOUS NOTES:
*malloc on ...
==============
create_process() --> (Process**) new_pool
_create_process() --> (Process*) new processes


create_table() --> (Table*) new_table (self)
    - also calls create_queue() for wait, term queues and ready/priority queues
    - if priority queues are used, (Queue**) prio_q is created (which is a queue of queues)
create_queue() --> (Queue*) new queues

enqueue() --> (Node*) new_node


*free on ...
============
dequeue() --> (Node*) Node of the process that is dequeued


* when implementing I/O ...
===========================
maybe implement CPU and I/O burst as an array of length (cpu_burst + io_burst)
[1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1 ...] etc.
where 1 is CPU burst and 0 is I/O burst

when Process's state is 2 (running) or i/o-waiting (not assigned yet), pop the array etc.

can't pop an array like a list in python tho so.. maybe use a pointer to the array and increment it
when the process is running or i/o-waiting..? 

!TBD!



* CLK cycle ...
==========================================

--- CLK=t ---

[arrival check]: arrive @ CLK=t

[CPU schedule] (scheduler() called)
 - if running_p is NULL: scheduler() returns a process to run on CPU
 - if running_p is not NULL: scheduler() returns running_p (no change), or preempt running_p with a new process
 - if running_p is still NULL: CPU idle

[CPU compute]: compute for 1 CLK cycle (CLK=t)

[CPU check]: check if process is done
 - true: terminate process (finished @ CLK=t)
 - false: do nothing (keep process)

[All done check]: check if all processes are done
 - true: finished @ CLK=t
 - false: ready queue wait time incremented --> waited during CLK=t

[CPU check]: check if process should be preempted
 - TODO: preemption not implemented yet
 
update CLK=t+1

--- CLK=t+1 ---

<0526>
CPU() should schedule the process itself.

FCFS : check ready queue --> return most recent

SJF no preempt: check ready queue --> return shortest
SJF preempt: check ready queue and running_p --> return shortest

Priority no preempt: check rady queue --> return highest priority
Priority preempt: check ready queue and running_p --> return highest priority

RR: TODO